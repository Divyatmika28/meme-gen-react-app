{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","MemeGenerator","state","topText","bottomText","randomImage","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeIng","url","className","onSubmit","type","onChange","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8NAgBeA,MAZf,WACC,OACC,gCACC,yBACAC,IAAI,yEACJC,IAAI,mBAEJ,+C,0CCyEYC,E,kDA9EX,aACC,IAAD,8BACI,gBACKC,MAAO,CACRC,QAAQ,GACRC,WAAW,GACXC,YAAa,gCACbC,YAAa,IAGjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVxB,E,gEAcC,IAAD,OACIE,MAAM,qCACXC,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAC,GAAa,IACXE,EAAUF,EAASG,KAAnBD,MAER,EAAKE,SAAS,CAAEV,YAAaQ,S,mCAIfG,GACZ,IAAD,EAC0BA,EAAMC,OAArBC,EADX,EACWA,KAAMC,EADjB,EACiBA,MACbC,KAAKL,SAAL,eACJG,EAAOC,M,mCAGOH,GAChBA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,YAAYqB,QAC5DC,EAAcP,KAAKnB,MAAMI,YAAYiB,GAASM,IACpDR,KAAKL,SAAS,CACbX,YAAauB,M,+BAId,OACC,6BACC,0BAAME,UAAU,WAAWC,SAAUV,KAAKZ,cAEzC,2BACCuB,KAAK,OACLb,KAAK,UACLC,MAAOC,KAAKnB,MAAMC,QAClB8B,SAAUZ,KAAKd,aACf2B,YAAY,aAGb,2BACCF,KAAK,OACLb,KAAK,aACLC,MAAOC,KAAKnB,MAAME,WAClB6B,SAAUZ,KAAKd,aACf2B,YAAY,gBAGb,kDAED,yBAAKJ,UAAU,QACd,yBAAK/B,IAAKsB,KAAKnB,MAAMG,YAAaL,IAAI,KACtC,wBAAI8B,UAAU,WAAWT,KAAKnB,MAAMC,SACpC,wBAAI2B,UAAU,cAAcT,KAAKnB,MAAME,aAG5B,6BACZ,4BAAQ0B,UAAU,UACjB,iE,GAxEuBK,aCebC,MAVf,WACE,OACC,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5afc5de1.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\n\nfunction Header () {\n\treturn (\n\t\t<header>\n\t\t\t<img \n\t\t\tsrc='http://www.pngall.com/wp-content/uploads/2016/03/Me-Gusta-Meme-PNG.png' \n\t\t\talt='Me gusta meme!' \n\t\t\t/>\n\t\t\t<p>Meme Generator</p>\n\t\t</header>\n\t)\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport './style.css';\n\n// Initiase state to save top text, short text and random image\n\nclass MemeGenerator extends Component {\n    constructor()\n    {\n        super()\n        this.state ={\n            topText:\"\",\n            bottomText:\"\",\n            randomImage: 'http://i.imgflip.com/1bij.jpg',\n            allMemeImgs: []\n\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    // use this functoin to call api and store data\n    componentDidMount()\n    {\n        fetch('https://api.imgflip.com/get_memes')\n\t\t.then( response => response.json())\n\t\t.then( response => {\n\t\t\tconst { memes } = response.data;\n\t\t\t// console.log(memes[0].url)\n\t\t\tthis.setState({ allMemeImgs: memes})\n\t\t})\n    }\n\n    handleChange(event)\n    {\n        const {name, value} = event.target;\n        this.setState({\n\t\t\t[name]: value\n\t\t});\n    }\n    handleSubmit (event) {\n\t\tevent.preventDefault();\n\t\tconst randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\n\t\tconst randMemeIng = this.state.allMemeImgs[randNum].url;\n\t\tthis.setState({\n\t\t\trandomImage: randMemeIng\n\t\t});\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form className='memeForm' onSubmit={this.handleSubmit}>\n\t\t\t\t\t{ /* first input */}\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tname='topText'\n\t\t\t\t\t\tvalue={this.state.topText}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tplaceholder='Top Text'\n\t\t\t\t\t/>\n\t\t\t\t\t{ /* second input */}\n\t\t\t\t\t<input \n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tname='bottomText'\n\t\t\t\t\t\tvalue={this.state.bottomText}\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\tplaceholder='Bottom Text'\n\t\t\t\t\t/> \n\t\t\t\t{ /* button to generate a Meme*/}\n\t\t\t\t\t<button>Generate Meme</button>\n\t\t\t\t</form>\n\t\t\t\t<div className='meme'>\n\t\t\t\t\t<img src={this.state.randomImage} alt='' />\n\t\t\t\t\t<h2 className='topText'>{this.state.topText}</h2>\n\t\t\t\t\t<h2 className='bottomText'>{this.state.bottomText}</h2>\n                    \n\t\t\t\t</div>\n                <br/>\n\t\t\t\t<footer className='footer'>\n\t\t\t\t\t<p>What is this behavior, 2020?</p>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default MemeGenerator;","import React from 'react';\nimport './style.css';\n\nimport Header from './Header';\nimport MemeGenerator from './MemeGenerator';\n\n// Create two components : Header and Memegenerator\n// Header will only display thinsg \n// Memegenerator will be calling APIs and holding to data\n\nfunction App() {\n  return (\n   <div>\n     <Header />\n     <MemeGenerator />\n\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}